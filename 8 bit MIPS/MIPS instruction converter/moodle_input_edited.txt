addi $sp,$zero,255 		// $sp = 255  #f56ff // by default at this to code
addi $t0, $zero, 5    //$t0 = 5 //addi OK #f5005
subi $t1, $t0, 5      //$t1 = 0 //subi OK #b0105
add $t3, $t0, $t1     //$t3 = 5 //add OK #10130
beq $t0, $t3, label1  //branching will be executed  //beq OK #90301 // label lineno - (pc + 1) // 0 based line count
j end #01d00
label1: # j pc+1 # 00700
sll $t4, $t0, 2       //$t4 = 20 //sll OK #30042
sub $t1, $t4, $t3     //$t1 = 15 //sub OK #c4310
or $t4, $t1, $t0      //$t4 = ($1111 or 0101) = 1111 = 15 //or OK #21040
nor $t1, $t4, $t3     //$t1 = (1111 nor 1111)= 11110000 //nor OK #e4310
andi $t1, $t1, 0      //$t1 = 0 //andi OK #41100
ori $t0, $t1, 20      //$t0 = 20 //ori OK #71014
sw $t0, 3($t1)        //mem[$t1+3] = mem[3] = 20 //sw OK #d1003
lw $t1, 3($t1)        //$t1 = 20 //lw OK #a1103
srl $t1, $t1, 1       //$t1 = 10 //srl OK #80111
j label2              //unconditional jump will be executed //j OK #01b00
label3: # j pc+1   #01200
sw $t1,0($sp)       //at the beginning, initialize the $sp as 0xFF. now mem[$sp] = mem[0xFF] = 10. //stack push OK // was push $t1 #d6100
subi $sp,$sp,1  //was push $t1, $sp = 254 #b6601
sw $t0,0($sp)      //mem[0xFE] = 20 #d6000
subi $sp,$sp,1    // push $t0, $sp = 253 #b6601
addi $sp,$sp,1      //$t1 = 20 //stack pop OK pop $t1 , $sp = 254 #f6601
lw $t1,0($sp) // pop $t1, #a6100
addi $sp,$sp,1      //$t0 = 10  , $sp = 255 #f6601
lw $t0,0($sp) // pop $t0 #a6000
j end                 //unconditional jump will be executed #01d00
label2: #01c00
bneq $t1, $t0, label3 //$t1 != $t0 so this branching will be executed //bneq OK #510f4
end: #01e00